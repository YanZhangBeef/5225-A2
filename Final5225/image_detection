# import the necessary packages
import json
import boto3
import os
import uuid
from urllib.parse import unquote_plus
import numpy as np
import sys
import time
import cv2
import os

s3_client = boto3.client('s3')
dynamodb = boto3.client('dynamodb')
TABLE_NAME = 'imageTags'

def load_model(configpath,weightspath):
    # load our YOLO object detector trained on COCO dataset (80 classes)
    print("[INFO] loading YOLO from disk...")
    net = cv2.dnn.readNetFromDarknet(configpath, weightspath)
    return net

def lambda_handler(event, context):
    for record in event['Records']:
        bucket = record['s3']['bucket']['name']
        key = unquote_plus(record['s3']['object']['key'])
        url = "https://" + str(bucket) + ".s3.amazonaws.com/" + str(key)
        
        s3_client.download_file(bucket, key, "/tmp/"+key)
        s3_client.download_file("yolo-g", "coco.names", "/tmp/coco.names")
        s3_client.download_file("yolo-g", "yolov3-tiny.cfg", "/tmp/yolov3-tiny.cfg")
        s3_client.download_file("yolo-g", "yolov3-tiny.weights", "/tmp/yolov3-tiny.weights")
        img = cv2.imread("/tmp/"+key)
        id = uuid.uuid5(uuid.NAMESPACE_OID, "/tmp/"+key)
        npimg=np.array(img)
        image=npimg.copy()
        image=cv2.cvtColor(image,cv2.COLOR_BGR2RGB)
        # load the neural net.  Should be local to this method as its multi-threaded endpoint
        nets = load_model("/tmp/yolov3-tiny.cfg", "/tmp/yolov3-tiny.weights")
        Lables=get_labels("/tmp/coco.names")
        result = do_prediction(image, nets, Lables, id)
        data = {}
        
        data['id'] = {'S': str(result['id'])}
        data['tag'] = {'S': str(result['tag'])}
        data['url'] = {'S': url}
        response = dynamodb.put_item(TableName=TABLE_NAME, Item=data)
        
    return {
        'statusCode': 200,
        'body': json.dumps('Tags successfully inserted into database...'+str(result))
    }

# construct the argument parse and parse the arguments
confthres = 0.3
nmsthres = 0.1

def get_labels(labels_path):
    # load the COCO class labels our YOLO model was trained on
    lpath = labels_path
    LABELS = open(lpath).read().strip().split("\n")
    return LABELS

def do_prediction(image,net,LABELS,id):

    (H, W) = image.shape[:2]
    # determine only the *output* layer names that we need from YOLO
    ln = net.getLayerNames()
    ln = [ln[i - 1] for i in net.getUnconnectedOutLayers()]

    # construct a blob from the input image and then perform a forward
    # pass of the YOLO object detector, giving us our bounding boxes and
    # associated probabilities
    blob = cv2.dnn.blobFromImage(image, 1 / 255.0, (416, 416),
                                 swapRB=True, crop=False)
    net.setInput(blob)
    start = time.time()
    layerOutputs = net.forward(ln)
    #print(layerOutputs)
    end = time.time()

    # show timing information on YOLO
    print("[INFO] YOLO took {:.6f} seconds".format(end - start))

    # initialize our lists of detected bounding boxes, confidences, and
    # class IDs, respectively
    boxes = []
    confidences = []
    classIDs = []
    result = {}

    # loop over each of the layer outputs
    for output in layerOutputs:
        # loop over each of the detections
        for detection in output:
            # extract the class ID and confidence (i.e., probability) of
            # the current object detection
            scores = detection[5:]
            # print(scores)
            classID = np.argmax(scores)
            # print(classID)
            confidence = scores[classID]

            # filter out weak predictions by ensuring the detected
            # probability is greater than the minimum probability
            if confidence > confthres:
                # scale the bounding box coordinates back relative to the
                # size of the image, keeping in mind that YOLO actually
                # returns the center (x, y)-coordinates of the bounding
                # box followed by the boxes' width and height
                box = detection[0:4] * np.array([W, H, W, H])
                (centerX, centerY, width, height) = box.astype("int")

                # use the center (x, y)-coordinates to derive the top and
                # and left corner of the bounding box
                x = int(centerX - (width / 2))
                y = int(centerY - (height / 2))

                # update our list of bounding box coordinates, confidences,
                # and class IDs
                boxes.append([x, y, int(width), int(height)])

                confidences.append(float(confidence))
                classIDs.append(classID)
                #return "end"

    # apply non-maxima suppression to suppress weak, overlapping bounding boxes
    idxs = cv2.dnn.NMSBoxes(boxes, confidences, confthres,
                            nmsthres)

    # ensure at least one detection exists
    result['id'] = id
    tag = ''
    if len(idxs) > 0:
        # loop over the indexes we are keeping
        for i in idxs.flatten():
            if LABELS[classIDs[i]] not in tag:
                tag += (LABELS[classIDs[i]])
                tag += ','
        tag = tag[0:-1]
    
    result['tag'] = tag
    return result
